#! /usr/bin/env perl6
use v6.c;

=begin pod
=TITLE Rendering pod

This module provides functionality to take a precompiled pod and generate
output based on templates. The default templates are for html and for a separate
HTML file for each source pod.

=begin SYNOPSIS

    use PodCache::Render;

    my PodCache::Render $renderer .= new(
        :path<path-to-pod-cache>,
        :templates<path-to-templates>,
        :output<path-to-output>,
        :rendering<html>,
        :!global-links
        );

=end SYNOPSIS
=item new
    - instantiates object and verifies cache is present
    - creates or empties the output directory
    - verifies that <templates>/<rendering> directory exists and contains
        a full set of templates

=item path
    - location of perl6 compunit cache, as generated by Pod::To::Cached
    - defaults to '.pod-cache'

=item templates
    - location of templates root directory
    - defaults to 'resources/templates', which is where a complete set of templates exists

=item rendering
    - the type of rendering chosen
    - default is html, and refers to templates/html in which a complete set of templates exists
    - any other valid directory name can be used, eg md, so long as templates/md contains
    a complete set of templates
    - It is possible to specify the template/rendering options with only those templates that
    need to be over-ridden.

=item output
    - the path where output is sent
    - default is a directory with the same name as C<rendering33>

=item global-links
    - boolean default False
    - if true href links in <a> tags must all be relative to collection (podfile appended to local link)
    - if false links need only be unique relative to Processed

=end pod

use JSON::Fast;
use nqp;
use Pod::To::Cached;
use PodCache::Engine;
use PodCache::Processed;

no precompilation;
unit class PodCache::Render is Pod::To::Cached;

my PodCache::Engine $engine;
constant TEMPLATES = 'resources/templates';
constant RENDERING = 'html';

has Bool $!global-links; # whether links must be unique to collection (True), or to Pod file (Default False)
has Bool $.verbose is rw;
has Bool $.debug is rw;
has $!templates;
has $!rendering;
has $!output;

submethod BUILD(
    :$!templates = TEMPLATES,
    :$!rendering = RENDERING,
    :$!output = $!rendering,
    :$!global-links = False,
    :$!verbose = False,
    :$!debug = False,
    ) {}

submethod TWEAK {
    $engine .= new(:default( TEMPLATES ~ '/' ~ RENDERING ), :$!templates, :$!rendering);
    $engine.verify-templates;
}

method tmpl-report { $engine.tmpl-report }


sub body-wrap( $pf --> Str ) {
    $engine.rendition('body-wrap', {:contents( $pf.pod-body )})
}

sub file-wrap( *@sections --> Str ) {
    $engine.rendition('file-wrap', {:contents( [~] @sections )})
}

method processed-instance(:$name, :$pod-tree ) { PodCache::Processed.new(:$name, :$pod-tree, :$!debug, :templater($engine), :$!verbose, :$!global-links ) }
